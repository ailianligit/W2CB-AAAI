import argparse
import random
import csv
import numpy as np
import os
import time

import torch

from utils import get_utility_info
from LinUCB import LinUCB, isolated_LinUCB

batch_size = 64
test_block_size = 200
# CIFAR-10 dataset
cifar10_data_dir = '/home/ubuntu/data/dataset'
# PACS dataset
domains = ['cartoon', 'art_painting', 'sketch', 'photo']
pacs_data_dir = '/home/ubuntu/data/dataset/PACS'

domain_block_num = [[9,0,0,0],[5,4,0,0],[3,3,3,0],[3,2,2,2]]

max_value = 0.0

import math
class CUCB:
    def __init__(self, n_arms):
        self.n_arms = n_arms  # 老虎机的臂数
        self.counts = np.zeros(n_arms)  # 每个臂被拉动的次数
        self.values = np.full(n_arms, 1.0, dtype=float)  # 每个臂的平均奖励估计
        self.rounds = 0

    def select_arms(self, n_pulled_arms):
        self.rounds += 1
        total_counts = np.sum(self.counts) + 1
        cof = 1.5
        ucb_values = [
            self.values[i] + math.sqrt((cof * math.log(total_counts)) / (self.counts[i] + 1))
            for i in range(self.n_arms)
        ]
        print(ucb_values)
        # 选择具有最高 UCB 值的 n_pulled_arms 个臂
        indices = np.argsort(ucb_values)[-n_pulled_arms:]
        policy = tuple(sorted(indices))
        # policy = [1 if i in indices else 0 for i in range(self.n_arms)]
        return policy

    def update(self, policy, rewards):
        for arm in range(self.n_arms):
            if arm in policy:
                self.counts[arm] += 1
                n = self.counts[arm]
                self.values[arm] = ((n - 1) / n) * self.values[arm] + (1 / n) * rewards[arm]
        print(self.values)

import pandas as pd
def get_context(config, stage):
    global max_value
    contexts_list = []
    if stage == 'train':
        begin_row = config['round']
    else:
        begin_row = config['round']+100

    if config['dataset'] == 'pacs':
        embedding_path = f"/home/ubuntu/data/sim_selection/sim_embedding/{config['network']}_{config['dataset']}/size_{config['block_size']}_block_{config['block_num']}_domain_{config['domain_num']}.csv"
        embedding_df = pd.read_csv(embedding_path, header=None)
        # source_path = f"/home/ubuntu/data/sim_selection/sim_source_labels/size_{config['block_size']}_block_{config['block_num']}_domain_{config['domain_num']}.csv"
        # source_df = pd.read_csv(source_path, header=None)
        
    task_path = f"/home/ubuntu/data/sim_selection/sim_task_labels/{config['network']}_{config['dataset']}/size_{config['block_size']}_block_{config['block_num']}_domain_{config['domain_num']}.csv"
    task_df = pd.read_csv(task_path, header=None)
    
    for j in range(config['block_num']):
        if config['dataset'] == 'pacs':
            selected_rows = embedding_df.iloc[begin_row:begin_row+1]
            selected_columns = selected_rows.iloc[:, j*config['label_num']:(j+1)*config['label_num']]
            selected_array = selected_columns.to_numpy()
            ot = np.squeeze(selected_array)
            max_value = max(max_value, max(1/ot))
            contexts_list.append((1/ot)/0.12222159798081475)
        elif config['dataset'] == 'cifar10':
            selected_rows_task = task_df.iloc[begin_row:begin_row+1]
            selected_array = selected_rows_task.to_numpy()
            task_label = np.squeeze(selected_array)
            contexts_list.append(task_label/np.sum(task_label))
        # selected_rows_source = source_df.iloc[j:j+1]
        # selected_array = selected_rows_source.to_numpy()
        # source_label = np.squeeze(selected_array)
    print(max_value)
    contexts = np.array(contexts_list)
    return contexts

def get_score(config):
    scores_list = []
    for j in range(config['block_num']):
        combo = (j,)
        sources_x = []
        sources_y = []
        test_loader = None
        acc, loss = get_utility_info(config, sources_x, sources_y, test_loader, combo)
        scores_list.append(acc/100)
    scores = np.array(scores_list)
    return scores

if __name__ == "__main__":
    def validate_input(value):
        if value == "random":
            return value
        try:
            int_value = int(value)
            return int_value
        except ValueError:
            raise argparse.ArgumentTypeError("Input must be 'random' or an integer.")
    parser = argparse.ArgumentParser()
    parser.add_argument("--seed", type=int, required=True)
    parser.add_argument("--method", choices=["ucb"], required=True)
    parser.add_argument("--budget", type=validate_input, required=True)
    parser.add_argument("--block-size", type=int, required=True)
    parser.add_argument("--block-num", type=int, required=True)
    parser.add_argument("--domain-num", type=int, required=True)
    parser.add_argument("--train-begin", type=int, required=True)
    parser.add_argument("--test-begin", type=int, required=True)
    parser.add_argument("--train-duration", type=int, required=True)
    parser.add_argument("--test-duration", type=int, required=True)
    parser.add_argument("--network", choices=["mobilenetv2", "resnet18", "densenet121"], required=True)
    parser.add_argument("--dataset", choices=["cifar10", "pacs"], required=True)
    args = parser.parse_args()

    seed = args.seed
    np.random.seed(seed)
    random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)

    method = args.method
    budget = args.budget
    block_size = args.block_size
    block_num = args.block_num
    domain_num = args.domain_num
    train_begin = args.train_begin
    test_begin = args.test_begin
    train_duration = args.train_duration
    test_duration = args.test_duration
    network = args.network
    dataset = args.dataset

    train_results_path = f'/home/ubuntu/data/sim_selection/train_results/{network}_{dataset}/{method}_budget_{budget}_size_{block_size}_block_{block_num}_domain_{domain_num}_context.csv'
    test_results_path = f'/home/ubuntu/data/sim_selection/test_results/{network}_{dataset}/{method}_budget_{budget}_size_{block_size}_block_{block_num}_domain_{domain_num}_context.csv'       

    config = {}
    config['method'] = method
    config['budegt'] = budget
    config['block_size'] = block_size
    config['block_num'] = block_num
    config['batch_size'] = batch_size
    config['network'] = network
    config['dataset'] = dataset
    config['train_results_path'] = train_results_path
    config['test_results_path'] = test_results_path

    with open(f'/home/ubuntu/data/sim_selection/log_cache/{network}_{dataset}_{method}_budget_{budget}_size_{block_size}_block_{block_num}_domain_{domain_num}_{int(time.time())}.txt', 'w', encoding='utf-8') as file:
        file.write(f'selection config: \n')
        file.write(f'seed: {seed}\n')
        file.write(f'method: {method}\n')
        file.write(f'budget: {budget}\n')
        file.write(f'block_size: {block_size}\n')
        file.write(f'block_num: {block_num}\n')
        file.write(f'domain_num: {domain_num}\n')
        file.write(f'train_begin: {train_begin}\n')
        file.write(f'test_begin: {test_begin}\n')
        file.write(f'train_duration: {train_duration}\n')
        file.write(f'test_duration: {test_duration}\n')
        file.write(f'batch_size: {batch_size}\n')
        file.write(f'network: {network}\n')
        file.write(f'dataset: {dataset}\n')
        file.write(f'train_results_path: {train_results_path}\n')
        file.write(f'test_results_path: {test_results_path}\n')
        file.flush()
        
        if dataset == 'pacs':
            label_num = 7
            if domain_num == 1:
                test_budget_list=[2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1]
                test_domain_list=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                test_q_list=[(0.7, 0.2), (0.3, 0.4), (0.3, 0.0), (0.0, 0.5), (0.0, 0.0), (0.2, 0.0), (0.8, 0.1), (0.2, 0.1), (0.9, 0.1), (0.6, 0.1), (0.0, 0.9), (0.1, 0.6), (0.5, 0.4), (0.5, 0.3), (0.4, 0.6), (0.1, 0.0), (0.9, 0.1), (0.1, 0.8), (0.4, 0.2), (0.5, 0.1), (0.3, 0.5), (0.4, 0.2), (0.0, 1.0), (0.2, 0.4), (0.1, 0.1), (0.8, 0.2), (0.4, 0.4), (0.5, 0.3), (0.0, 0.1), (0.4, 0.0), (0.0, 0.5), (0.4, 0.2), (0.0, 0.1), (0.1, 0.2), (0.8, 0.0), (0.8, 0.2), (0.6, 0.2), (0.0, 0.4), (0.5, 0.0), (0.5, 0.3), (0.2, 0.3), (0.2, 0.2), (0.6, 0.0), (0.2, 0.5), (0.3, 0.4), (0.2, 0.1), (0.6, 0.0), (0.7, 0.3), (0.3, 0.7), (0.5, 0.4), (0.3, 0.3), (0.0, 1.0), (0.3, 0.6), (0.5, 0.4), (0.1, 0.4), (0.5, 0.0), (0.1, 0.4), (0.4, 0.0), (0.1, 0.9), (0.1, 0.6), (0.4, 0.0), (0.6, 0.0), (0.3, 0.5), (0.6, 0.1), (0.6, 0.4), (0.8, 0.2), (0.3, 0.6), (0.4, 0.6), (0.8, 0.0), (0.4, 0.4), (0.3, 0.6), (0.7, 0.2), (0.1, 0.3), (0.3, 0.3), (0.2, 0.0), (0.0, 0.3), (0.1, 0.7), (0.6, 0.3), (0.0, 0.1), (0.6, 0.3), (0.2, 0.8), (0.7, 0.0), (0.1, 0.7), (0.2, 0.7), (0.7, 0.2), (0.4, 0.3), (0.1, 0.4), (0.3, 0.4), (0.5, 0.5), (0.8, 0.1), (0.2, 0.2), (0.3, 0.6), (0.2, 0.3), (0.1, 0.6), (0.6, 0.0), (0.3, 0.6), (0.0, 0.9), (0.0, 0.5), (0.4, 0.6), (0.3, 0.7)]
                train_budget_list=[1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2]
                train_domain_list=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                train_q_list=[(0.2, 0.8), (0.1, 0.2), (0.0, 0.6), (0.0, 0.3), (0.4, 0.4), (0.7, 0.1), (0.3, 0.6), (0.1, 0.8), (0.2, 0.4), (0.2, 0.1), (0.0, 0.2), (0.7, 0.1), (0.6, 0.4), (0.1, 0.9), (0.0, 0.6), (0.4, 0.0), (0.1, 0.3), (0.9, 0.0), (0.9, 0.0), (0.2, 0.7), (0.7, 0.1), (0.1, 0.2), (0.8, 0.0), (0.7, 0.1), (0.5, 0.4), (0.5, 0.1), (0.0, 1.0), (0.6, 0.0), (0.7, 0.0), (0.3, 0.4), (0.8, 0.2), (0.7, 0.1), (0.0, 1.0), (0.2, 0.4), (0.8, 0.0), (0.1, 0.3), (0.1, 0.7), (0.2, 0.7), (0.4, 0.6), (0.3, 0.7), (0.8, 0.2), (0.6, 0.3), (0.2, 0.1), (0.4, 0.6), (0.4, 0.0), (0.4, 0.4), (0.2, 0.7), (0.5, 0.5), (0.5, 0.3), (0.6, 0.3), (0.6, 0.0), (0.2, 0.7), (0.0, 0.2), (0.5, 0.1), (0.7, 0.1), (0.0, 0.2), (0.2, 0.1), (0.1, 0.5), (0.8, 0.0), (0.9, 0.1), (0.3, 0.1), (0.6, 0.1), (0.7, 0.2), (0.4, 0.0), (0.0, 0.5), (0.0, 0.4), (0.5, 0.5), (0.6, 0.2), (0.2, 0.2), (0.1, 0.9), (0.2, 0.3), (0.0, 0.7), (0.8, 0.2), (0.1, 0.7), (0.6, 0.4), (0.3, 0.6), (0.7, 0.1), (0.3, 0.6), (0.4, 0.0), (0.4, 0.0), (0.0, 0.9), (0.5, 0.3), (0.0, 0.4), (0.7, 0.0), (0.2, 0.1), (0.4, 0.5), (0.6, 0.2), (0.3, 0.2), (0.4, 0.2), (0.4, 0.5), (0.1, 0.7), (0.1, 0.2), (0.1, 0.6), (0.0, 0.4), (0.8, 0.1), (0.5, 0.1), (0.7, 0.0), (0.1, 0.2), (0.0, 0.0), (0.1, 0.1)]
            elif domain_num == 2:
                test_budget_list=[2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1]
                test_domain_list=[1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1]
                test_q_list=[(0.7, 0.2), (0.3, 0.4), (0.3, 0.0), (0.0, 0.5), (0.0, 0.0), (0.2, 0.0), (0.8, 0.1), (0.2, 0.1), (0.9, 0.1), (0.6, 0.1), (0.0, 0.9), (0.1, 0.6), (0.5, 0.4), (0.5, 0.3), (0.4, 0.6), (0.1, 0.0), (0.9, 0.1), (0.1, 0.8), (0.4, 0.2), (0.5, 0.1), (0.3, 0.5), (0.4, 0.2), (0.0, 1.0), (0.2, 0.4), (0.1, 0.1), (0.8, 0.2), (0.4, 0.4), (0.5, 0.3), (0.0, 0.1), (0.4, 0.0), (0.0, 0.5), (0.4, 0.2), (0.0, 0.1), (0.1, 0.2), (0.8, 0.0), (0.8, 0.2), (0.6, 0.2), (0.0, 0.4), (0.5, 0.0), (0.5, 0.3), (0.2, 0.3), (0.2, 0.2), (0.6, 0.0), (0.2, 0.5), (0.3, 0.4), (0.2, 0.1), (0.6, 0.0), (0.7, 0.3), (0.3, 0.7), (0.5, 0.4), (0.3, 0.3), (0.0, 1.0), (0.3, 0.6), (0.5, 0.4), (0.1, 0.4), (0.5, 0.0), (0.1, 0.4), (0.4, 0.0), (0.1, 0.9), (0.1, 0.6), (0.4, 0.0), (0.6, 0.0), (0.3, 0.5), (0.6, 0.1), (0.6, 0.4), (0.8, 0.2), (0.3, 0.6), (0.4, 0.6), (0.8, 0.0), (0.4, 0.4), (0.3, 0.6), (0.7, 0.2), (0.1, 0.3), (0.3, 0.3), (0.2, 0.0), (0.0, 0.3), (0.1, 0.7), (0.6, 0.3), (0.0, 0.1), (0.6, 0.3), (0.2, 0.8), (0.7, 0.0), (0.1, 0.7), (0.2, 0.7), (0.7, 0.2), (0.4, 0.3), (0.1, 0.4), (0.3, 0.4), (0.5, 0.5), (0.8, 0.1), (0.2, 0.2), (0.3, 0.6), (0.2, 0.3), (0.1, 0.6), (0.6, 0.0), (0.3, 0.6), (0.0, 0.9), (0.0, 0.5), (0.4, 0.6), (0.3, 0.7)]
                train_budget_list=[1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2]
                train_domain_list=[0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0]
                train_q_list=[(0.2, 0.8), (0.1, 0.2), (0.0, 0.6), (0.0, 0.3), (0.4, 0.4), (0.7, 0.1), (0.3, 0.6), (0.1, 0.8), (0.2, 0.4), (0.2, 0.1), (0.0, 0.2), (0.7, 0.1), (0.6, 0.4), (0.1, 0.9), (0.0, 0.6), (0.4, 0.0), (0.1, 0.3), (0.9, 0.0), (0.9, 0.0), (0.2, 0.7), (0.7, 0.1), (0.1, 0.2), (0.8, 0.0), (0.7, 0.1), (0.5, 0.4), (0.5, 0.1), (0.0, 1.0), (0.6, 0.0), (0.7, 0.0), (0.3, 0.4), (0.8, 0.2), (0.7, 0.1), (0.0, 1.0), (0.2, 0.4), (0.8, 0.0), (0.1, 0.3), (0.1, 0.7), (0.2, 0.7), (0.4, 0.6), (0.3, 0.7), (0.8, 0.2), (0.6, 0.3), (0.2, 0.1), (0.4, 0.6), (0.4, 0.0), (0.4, 0.4), (0.2, 0.7), (0.5, 0.5), (0.5, 0.3), (0.6, 0.3), (0.6, 0.0), (0.2, 0.7), (0.0, 0.2), (0.5, 0.1), (0.7, 0.1), (0.0, 0.2), (0.2, 0.1), (0.1, 0.5), (0.8, 0.0), (0.9, 0.1), (0.3, 0.1), (0.6, 0.1), (0.7, 0.2), (0.4, 0.0), (0.0, 0.5), (0.0, 0.4), (0.5, 0.5), (0.6, 0.2), (0.2, 0.2), (0.1, 0.9), (0.2, 0.3), (0.0, 0.7), (0.8, 0.2), (0.1, 0.7), (0.6, 0.4), (0.3, 0.6), (0.7, 0.1), (0.3, 0.6), (0.4, 0.0), (0.4, 0.0), (0.0, 0.9), (0.5, 0.3), (0.0, 0.4), (0.7, 0.0), (0.2, 0.1), (0.4, 0.5), (0.6, 0.2), (0.3, 0.2), (0.4, 0.2), (0.4, 0.5), (0.1, 0.7), (0.1, 0.2), (0.1, 0.6), (0.0, 0.4), (0.8, 0.1), (0.5, 0.1), (0.7, 0.0), (0.1, 0.2), (0.0, 0.0), (0.1, 0.1)]
            elif domain_num == 3:
                test_budget_list=[3, 2, 1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 3, 2, 1, 3, 2, 3, 1, 2, 1, 3, 2, 3, 3, 2, 3, 1, 3, 1, 1, 3, 1, 2, 1, 1, 1, 2, 2, 2, 3, 2, 1, 2, 2, 1, 3, 2, 3, 3, 3, 1, 3, 3, 1, 3, 3, 1, 1, 2, 2, 2, 3, 3, 3, 1, 3, 2, 1, 1, 1, 2, 2, 2, 1, 1, 3, 3, 2, 1, 3, 2, 2, 3, 2, 1, 2, 1, 1, 3, 3, 3, 2, 3, 3]
                test_domain_list=[1, 2, 1, 1, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 2, 1, 2, 0, 1, 1, 2, 1, 2, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 2, 0, 2, 0, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 2, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 2, 1, 0, 2, 0, 0, 2, 1, 2, 0, 1, 2, 2, 1, 0, 2, 2, 2, 0, 2, 1, 1, 2, 2, 1, 1, 2, 1]
                test_q_list=[(0.1, 0.3), (0.3, 0.1), (0.5, 0.0), (0.3, 0.0), (0.0, 0.3), (0.1, 0.0), (0.5, 0.1), (0.7, 0.3), (0.8, 0.2), (0.7, 0.3), (0.3, 0.1), (0.7, 0.0), (0.0, 0.6), (0.5, 0.1), (0.3, 0.3), (0.7, 0.2), (0.6, 0.2), (0.3, 0.1), (0.1, 0.0), (0.0, 0.1), (0.3, 0.2), (0.7, 0.3), (0.6, 0.0), (0.2, 0.6), (0.0, 0.6), (0.4, 0.6), (0.7, 0.2), (0.3, 0.4), (0.3, 0.0), (0.0, 0.5), (0.0, 0.0), (0.2, 0.0), (0.8, 0.1), (0.2, 0.1), (0.9, 0.1), (0.6, 0.1), (0.0, 0.9), (0.1, 0.6), (0.5, 0.4), (0.5, 0.3), (0.4, 0.6), (0.1, 0.0), (0.9, 0.1), (0.1, 0.8), (0.4, 0.2), (0.5, 0.1), (0.3, 0.5), (0.4, 0.2), (0.0, 1.0), (0.2, 0.4), (0.1, 0.1), (0.8, 0.2), (0.4, 0.4), (0.5, 0.3), (0.0, 0.1), (0.4, 0.0), (0.0, 0.5), (0.4, 0.2), (0.0, 0.1), (0.1, 0.2), (0.8, 0.0), (0.8, 0.2), (0.6, 0.2), (0.0, 0.4), (0.5, 0.0), (0.5, 0.3), (0.2, 0.3), (0.2, 0.2), (0.6, 0.0), (0.2, 0.5), (0.3, 0.4), (0.2, 0.1), (0.6, 0.0), (0.7, 0.3), (0.3, 0.7), (0.5, 0.4), (0.3, 0.3), (0.0, 1.0), (0.3, 0.6), (0.5, 0.4), (0.1, 0.4), (0.5, 0.0), (0.1, 0.4), (0.4, 0.0), (0.1, 0.9), (0.1, 0.6), (0.4, 0.0), (0.6, 0.0), (0.3, 0.5), (0.6, 0.1), (0.6, 0.4), (0.8, 0.2), (0.3, 0.6), (0.4, 0.6), (0.8, 0.0), (0.4, 0.4), (0.3, 0.6), (0.7, 0.2), (0.1, 0.3), (0.3, 0.3)]
                train_budget_list=[1, 1, 1, 1, 2, 3, 1, 2, 2, 3, 3, 1, 3, 3, 2, 2, 2, 1, 1, 3, 3, 1, 1, 2, 1, 1, 3, 3, 2, 1, 3, 1, 1, 2, 1, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 2, 3, 2, 1, 3, 2, 2, 2, 1, 3, 2, 3, 2, 3, 1, 2, 2, 1, 3, 2, 1, 2, 2, 2, 3, 1, 1, 1, 1, 2, 3, 1, 3, 1, 1, 2, 2, 2, 3, 2, 2, 1, 1, 2, 2, 3, 3, 1, 3, 2, 2, 1, 2, 2, 2]
                train_domain_list=[1, 2, 2, 2, 2, 2, 0, 1, 0, 1, 1, 1, 0, 1, 1, 2, 2, 1, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 2, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 2, 0, 1, 2, 1, 1, 0, 2, 2, 2, 2, 0, 0, 1, 0, 2, 0, 1, 2, 2, 1, 1, 2, 0, 0, 2, 2, 2, 0]
                train_q_list=[(0.1, 0.4), (0.1, 0.9), (0.0, 0.5), (0.1, 0.8), (0.0, 0.6), (0.7, 0.1), (0.2, 0.6), (0.2, 0.8), (0.4, 0.5), (0.3, 0.1), (0.3, 0.7), (0.5, 0.0), (0.2, 0.7), (0.3, 0.5), (0.4, 0.5), (0.0, 0.8), (0.3, 0.1), (0.3, 0.6), (0.3, 0.7), (0.7, 0.0), (0.1, 0.4), (0.3, 0.6), (0.3, 0.4), (0.4, 0.4), (0.4, 0.3), (0.1, 0.3), (0.5, 0.1), (0.8, 0.2), (0.3, 0.3), (0.1, 0.3), (0.4, 0.3), (0.5, 0.2), (0.4, 0.0), (0.8, 0.2), (0.4, 0.0), (0.0, 0.8), (0.4, 0.2), (0.1, 0.0), (0.2, 0.0), (0.1, 0.1), (0.1, 0.9), (0.0, 0.2), (0.4, 0.1), (0.3, 0.1), (0.6, 0.4), (0.0, 0.9), (0.1, 0.3), (0.1, 0.2), (0.3, 0.2), (0.8, 0.1), (0.2, 0.0), (0.4, 0.0), (0.3, 0.4), (0.3, 0.4), (0.6, 0.1), (0.4, 0.2), (0.1, 0.0), (0.2, 0.4), (0.1, 0.7), (0.4, 0.6), (0.7, 0.1), (0.9, 0.0), (0.0, 0.1), (0.0, 1.0), (0.0, 0.2), (0.4, 0.2), (0.1, 0.7), (0.5, 0.5), (0.2, 0.5), (0.0, 0.7), (0.1, 0.5), (0.4, 0.5), (0.1, 0.6), (0.8, 0.0), (0.0, 0.3), (0.0, 0.3), (0.2, 0.4), (0.1, 0.0), (0.3, 0.2), (0.0, 0.8), (0.6, 0.1), (0.3, 0.1), (0.7, 0.1), (0.7, 0.3), (0.2, 0.6), (0.8, 0.2), (0.1, 0.4), (0.0, 0.4), (0.7, 0.2), (0.3, 0.3), (0.3, 0.6), (0.0, 0.5), (0.7, 0.0), (0.2, 0.8), (0.1, 0.7), (0.1, 0.8), (0.7, 0.0), (0.2, 0.6), (0.1, 0.7), (0.4, 0.5)]
            elif domain_num == 4: 
                test_budget_list=[2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1]
                test_domain_list=[2, 1, 0, 2, 3, 0, 0, 2, 2, 1, 0, 1, 0, 0, 3, 0, 1, 1, 3, 1, 2, 3, 1, 1, 2, 3, 2, 3, 3, 0, 1, 1, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 1, 2, 3, 1, 1, 3, 1, 3, 3, 1, 0, 0, 3, 2, 3, 3, 3, 0, 0, 0, 3, 2, 0, 1, 1, 1, 3, 1, 3, 1, 2, 3, 1, 0, 3, 0, 0, 0, 0, 1, 1, 3, 3, 3, 1, 3, 0, 1, 3, 0, 3, 2, 3, 2, 3]
                test_q_list=[(0.7, 0.2), (0.3, 0.4), (0.3, 0.0), (0.0, 0.5), (0.0, 0.0), (0.2, 0.0), (0.8, 0.1), (0.2, 0.1), (0.9, 0.1), (0.6, 0.1), (0.0, 0.9), (0.1, 0.6), (0.5, 0.4), (0.5, 0.3), (0.4, 0.6), (0.1, 0.0), (0.9, 0.1), (0.1, 0.8), (0.4, 0.2), (0.5, 0.1), (0.3, 0.5), (0.4, 0.2), (0.0, 1.0), (0.2, 0.4), (0.1, 0.1), (0.8, 0.2), (0.4, 0.4), (0.5, 0.3), (0.0, 0.1), (0.4, 0.0), (0.0, 0.5), (0.4, 0.2), (0.0, 0.1), (0.1, 0.2), (0.8, 0.0), (0.8, 0.2), (0.6, 0.2), (0.0, 0.4), (0.5, 0.0), (0.5, 0.3), (0.2, 0.3), (0.2, 0.2), (0.6, 0.0), (0.2, 0.5), (0.3, 0.4), (0.2, 0.1), (0.6, 0.0), (0.7, 0.3), (0.3, 0.7), (0.5, 0.4), (0.3, 0.3), (0.0, 1.0), (0.3, 0.6), (0.5, 0.4), (0.1, 0.4), (0.5, 0.0), (0.1, 0.4), (0.4, 0.0), (0.1, 0.9), (0.1, 0.6), (0.4, 0.0), (0.6, 0.0), (0.3, 0.5), (0.6, 0.1), (0.6, 0.4), (0.8, 0.2), (0.3, 0.6), (0.4, 0.6), (0.8, 0.0), (0.4, 0.4), (0.3, 0.6), (0.7, 0.2), (0.1, 0.3), (0.3, 0.3), (0.2, 0.0), (0.0, 0.3), (0.1, 0.7), (0.6, 0.3), (0.0, 0.1), (0.6, 0.3), (0.2, 0.8), (0.7, 0.0), (0.1, 0.7), (0.2, 0.7), (0.7, 0.2), (0.4, 0.3), (0.1, 0.4), (0.3, 0.4), (0.5, 0.5), (0.8, 0.1), (0.2, 0.2), (0.3, 0.6), (0.2, 0.3), (0.1, 0.6), (0.6, 0.0), (0.3, 0.6), (0.0, 0.9), (0.0, 0.5), (0.4, 0.6), (0.3, 0.7)]
                train_budget_list=[1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2]
                train_domain_list=[1, 3, 1, 2, 2, 2, 2, 2, 0, 1, 0, 1, 3, 3, 1, 3, 3, 3, 0, 0, 2, 1, 3, 1, 2, 2, 3, 2, 3, 2, 2, 3, 2, 2, 2, 1, 0, 1, 2, 0, 1, 1, 1, 3, 2, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 0, 0, 2, 1, 3, 0, 0, 2, 3, 3, 3, 2, 1, 0, 2, 3, 0, 0, 3, 3, 0, 0, 1, 1, 2, 0, 1, 0, 3, 1, 3, 3, 3, 2, 3, 2, 0, 0, 1, 1, 2, 0, 1, 1]
                train_q_list=[(0.2, 0.8), (0.1, 0.2), (0.0, 0.6), (0.0, 0.3), (0.4, 0.4), (0.7, 0.1), (0.3, 0.6), (0.1, 0.8), (0.2, 0.4), (0.2, 0.1), (0.0, 0.2), (0.7, 0.1), (0.6, 0.4), (0.1, 0.9), (0.0, 0.6), (0.4, 0.0), (0.1, 0.3), (0.9, 0.0), (0.9, 0.0), (0.2, 0.7), (0.7, 0.1), (0.1, 0.2), (0.8, 0.0), (0.7, 0.1), (0.5, 0.4), (0.5, 0.1), (0.0, 1.0), (0.6, 0.0), (0.7, 0.0), (0.3, 0.4), (0.8, 0.2), (0.7, 0.1), (0.0, 1.0), (0.2, 0.4), (0.8, 0.0), (0.1, 0.3), (0.1, 0.7), (0.2, 0.7), (0.4, 0.6), (0.3, 0.7), (0.8, 0.2), (0.6, 0.3), (0.2, 0.1), (0.4, 0.6), (0.4, 0.0), (0.4, 0.4), (0.2, 0.7), (0.5, 0.5), (0.5, 0.3), (0.6, 0.3), (0.6, 0.0), (0.2, 0.7), (0.0, 0.2), (0.5, 0.1), (0.7, 0.1), (0.0, 0.2), (0.2, 0.1), (0.1, 0.5), (0.8, 0.0), (0.9, 0.1), (0.3, 0.1), (0.6, 0.1), (0.7, 0.2), (0.4, 0.0), (0.0, 0.5), (0.0, 0.4), (0.5, 0.5), (0.6, 0.2), (0.2, 0.2), (0.1, 0.9), (0.2, 0.3), (0.0, 0.7), (0.8, 0.2), (0.1, 0.7), (0.6, 0.4), (0.3, 0.6), (0.7, 0.1), (0.3, 0.6), (0.4, 0.0), (0.4, 0.0), (0.0, 0.9), (0.5, 0.3), (0.0, 0.4), (0.7, 0.0), (0.2, 0.1), (0.4, 0.5), (0.6, 0.2), (0.3, 0.2), (0.4, 0.2), (0.4, 0.5), (0.1, 0.7), (0.1, 0.2), (0.1, 0.6), (0.0, 0.4), (0.8, 0.1), (0.5, 0.1), (0.7, 0.0), (0.1, 0.2), (0.0, 0.0), (0.1, 0.1)]
        elif dataset == 'cifar10':
            label_num = 10
            domain_num = 1
            test_budget_list=[5, 3, 1, 2, 6, 4, 3, 3, 2, 2, 3, 1, 1, 4, 1, 3, 3, 5, 3, 1, 6, 4, 5, 1, 4, 1, 5, 3, 6, 5, 3, 5, 2, 6, 1, 1, 6, 2, 3, 1, 2, 1, 4, 3, 4, 6, 3, 2, 3, 3, 2, 6, 3, 6, 6, 6, 1, 5, 6, 2, 5, 6, 2, 2, 4, 4, 3, 6, 6, 5, 2, 6, 3, 1, 2, 1, 3, 4, 3, 1, 2, 5, 6, 3, 2, 6, 4, 4, 6, 4, 2, 3, 2, 2, 6, 5, 5, 3, 6, 5]
            test_domain_list=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            test_q_list=[(0.1, 0.3), (0.3, 0.3), (0.2, 0.6), (0.2, 0.4), (0.7, 0.3), (0.1, 0.7), (0.8, 0.1), (0.0, 1.0), (0.8, 0.0), (0.1, 0.3), (0.2, 0.6), (0.3, 0.6), (0.0, 0.2), (0.6, 0.0), (0.6, 0.4), (0.2, 0.3), (0.4, 0.3), (0.0, 0.9), (0.8, 0.0), (0.5, 0.0), (0.0, 0.9), (0.8, 0.2), (0.0, 0.8), (0.1, 0.2), (0.1, 0.9), (0.3, 0.6), (0.1, 0.9), (0.9, 0.0), (0.9, 0.1), (0.4, 0.3), (0.3, 0.4), (0.6, 0.2), (0.5, 0.1), (0.0, 0.7), (0.1, 0.1), (0.2, 0.5), (0.1, 0.3), (0.5, 0.4), (0.2, 0.7), (0.8, 0.0), (0.1, 0.2), (0.4, 0.1), (0.1, 0.8), (0.2, 0.4), (0.3, 0.5), (0.4, 0.0), (0.6, 0.4), (0.0, 0.0), (0.5, 0.2), (0.2, 0.7), (0.8, 0.0), (0.1, 0.1), (0.2, 0.8), (0.0, 0.5), (0.2, 0.6), (0.2, 0.0), (0.4, 0.5), (0.0, 0.5), (0.1, 0.5), (0.3, 0.2), (0.2, 0.6), (0.0, 0.2), (0.4, 0.2), (0.1, 0.6), (0.0, 0.7), (0.3, 0.3), (0.4, 0.3), (0.3, 0.0), (0.4, 0.1), (0.4, 0.5), (0.0, 0.1), (0.4, 0.2), (0.0, 0.1), (0.5, 0.5), (0.8, 0.1), (0.3, 0.4), (0.0, 0.6), (0.0, 0.8), (0.1, 0.4), (0.2, 0.3), (0.0, 0.4), (0.4, 0.3), (0.1, 0.4), (0.5, 0.1), (0.4, 0.3), (0.3, 0.2), (0.0, 0.0), (0.3, 0.7), (0.9, 0.1), (0.3, 0.6), (0.3, 0.2), (1.0, 0.0), (0.1, 0.6), (0.3, 0.2), (0.0, 0.8), (0.3, 0.1), (0.7, 0.2), (0.2, 0.7), (0.3, 0.4), (0.7, 0.1)]
            train_budget_list=[6, 3, 2, 3, 3, 3, 5, 1, 2, 2, 2, 4, 6, 2, 6, 2, 1, 4, 4, 3, 5, 4, 4, 1, 2, 4, 4, 5, 6, 1, 5, 4, 4, 1, 3, 3, 4, 4, 5, 6, 6, 5, 5, 2, 4, 2, 3, 4, 4, 1, 4, 3, 6, 6, 4, 6, 2, 4, 2, 5, 5, 1, 4, 5, 5, 6, 1, 1, 6, 4, 2, 4, 2, 1, 3, 4, 3, 2, 4, 3, 3, 4, 3, 4, 3, 1, 4, 1, 6, 5, 1, 3, 2, 6, 1, 6, 1, 1, 2, 2]
            train_domain_list=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            train_q_list=[(0.3, 0.7), (0.4, 0.1), (0.3, 0.4), (0.3, 0.5), (0.2, 0.4), (0.0, 0.8), (0.2, 0.4), (0.0, 0.0), (0.7, 0.1), (0.0, 0.9), (0.5, 0.2), (0.0, 0.4), (0.7, 0.1), (0.1, 0.6), (0.7, 0.1), (1.0, 0.0), (0.2, 0.2), (0.1, 0.3), (0.1, 0.8), (0.9, 0.0), (0.9, 0.1), (0.3, 0.4), (0.2, 0.3), (0.2, 0.8), (0.1, 0.2), (0.0, 0.6), (0.0, 0.3), (0.4, 0.4), (0.7, 0.1), (0.3, 0.6), (0.1, 0.8), (0.2, 0.4), (0.2, 0.1), (0.0, 0.2), (0.7, 0.1), (0.6, 0.4), (0.1, 0.9), (0.0, 0.6), (0.4, 0.0), (0.1, 0.3), (0.9, 0.0), (0.9, 0.0), (0.2, 0.7), (0.7, 0.1), (0.1, 0.2), (0.8, 0.0), (0.7, 0.1), (0.5, 0.4), (0.5, 0.1), (0.0, 1.0), (0.6, 0.0), (0.7, 0.0), (0.3, 0.4), (0.8, 0.2), (0.7, 0.1), (0.0, 1.0), (0.2, 0.4), (0.8, 0.0), (0.1, 0.3), (0.1, 0.7), (0.2, 0.7), (0.4, 0.6), (0.3, 0.7), (0.8, 0.2), (0.6, 0.3), (0.2, 0.1), (0.4, 0.6), (0.4, 0.0), (0.4, 0.4), (0.2, 0.7), (0.5, 0.5), (0.5, 0.3), (0.6, 0.3), (0.6, 0.0), (0.2, 0.7), (0.0, 0.2), (0.5, 0.1), (0.7, 0.1), (0.0, 0.2), (0.2, 0.1), (0.1, 0.5), (0.8, 0.0), (0.9, 0.1), (0.3, 0.1), (0.6, 0.1), (0.7, 0.2), (0.4, 0.0), (0.0, 0.5), (0.0, 0.4), (0.5, 0.5), (0.6, 0.2), (0.2, 0.2), (0.1, 0.9), (0.2, 0.3), (0.0, 0.7), (0.8, 0.2), (0.1, 0.7), (0.6, 0.4), (0.3, 0.6), (0.7, 0.1)]
        config['domain_num'] = domain_num
        config['label_num'] = label_num
    
    # bandit = isolated_LinUCB(d=label_num, sources_num=block_num)
    if dataset == 'pacs':
        # bandit = LinUCB(d=label_num)
        bandit = CUCB(block_num)
    elif dataset == 'cifar10':
        bandit = isolated_LinUCB(d=label_num, sources_num=block_num)
    with open(train_results_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        train_begin = args.train_begin
        for i in range(train_begin, train_duration):
            if budget == "random":
                round_budget = train_budget_list[i]
            else:
                round_budget = budget
            q1, q2 = train_q_list[i]
            domain = train_domain_list[i]
            config['round'] = i
            config['round_budget'] = round_budget
            config['q1'] = q1
            config['q2'] = q2
            config['domain'] = domain

            contexts = get_context(config, stage='train')
            # policy = bandit.select_arms(budget=config['round_budget'], contexts=contexts, config=config)
            policy = bandit.select_arms(config['round_budget'])

            sources_x = []
            sources_y = []
            test_loader = None
            acc, loss = get_utility_info(config, sources_x, sources_y, test_loader, policy)

            scores = get_score(config)
            # bandit.update(policy=policy, scores=scores, contexts=contexts)
            bandit.update(policy, scores)

            print(f"duration: {i}, budget: {round_budget}, q1: {q1}, q2: {q2}, domain: {domain}, policy: {policy}, acc: {acc}, loss: {loss}")
            writer.writerow([i, round_budget, q1, q2, domain, f'{policy}', acc, loss])
            file.flush()

    with open(test_results_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        test_begin = args.test_begin
        for i in range(test_begin, test_duration):
            if budget == "random":
                round_budget = test_budget_list[i]
            else:
                round_budget = budget
            q1, q2 = test_q_list[i]
            domain = test_domain_list[i]
            config['round'] = i
            config['round_budget'] = round_budget
            config['q1'] = q1
            config['q2'] = q2
            config['domain'] = domain

            contexts = get_context(config, stage='test')
            # policy = bandit.select_arms(budget=config['round_budget'], contexts=contexts, config=config)
            policy = bandit.select_arms(config['round_budget'])
            
            sources_x = []
            sources_y = []
            test_loader = None
            acc, loss = get_utility_info(config, sources_x, sources_y, test_loader, policy)

            print(f"duration: {i}, budget: {round_budget}, q1: {q1}, q2: {q2}, domain: {domain}, policy: {policy}, acc: {acc}, loss: {loss}")
            writer.writerow([i, round_budget, q1, q2, domain, f'{policy}', acc, loss])
            file.flush()